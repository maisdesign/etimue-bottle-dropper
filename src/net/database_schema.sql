-- Enable RLS (Row Level Security)
ALTER DATABASE postgres SET "app.jwt_secret" TO 'your-jwt-secret';

-- Create profiles table
CREATE TABLE IF NOT EXISTS public.profiles (
    id UUID REFERENCES auth.users ON DELETE CASCADE PRIMARY KEY,
    username TEXT,
    whatsapp TEXT,
    instagram TEXT,
    consent_marketing BOOLEAN NOT NULL DEFAULT false,
    consent_ts TIMESTAMPTZ,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create scores table
CREATE TABLE IF NOT EXISTS public.scores (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
    score INTEGER NOT NULL CHECK (score >= 0 AND score <= 600),
    run_seconds INTEGER NOT NULL CHECK (run_seconds = 60),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    tz TEXT NOT NULL DEFAULT 'Europe/Rome'
);

-- Enable RLS on tables
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.scores ENABLE ROW LEVEL SECURITY;

-- Profiles policies
CREATE POLICY "Users can view own profile" ON public.profiles
    FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can insert own profile" ON public.profiles
    FOR INSERT WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON public.profiles
    FOR UPDATE USING (auth.uid() = id);

-- Scores policies
CREATE POLICY "Users can insert own scores" ON public.scores
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can view all scores" ON public.scores
    FOR SELECT TO authenticated USING (true);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_scores_user_id ON public.scores(user_id);
CREATE INDEX IF NOT EXISTS idx_scores_created_at ON public.scores(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_scores_score_desc ON public.scores(score DESC);
CREATE INDEX IF NOT EXISTS idx_profiles_username ON public.profiles(username);

-- Function to automatically create profile on user signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.profiles (id, consent_marketing, consent_ts)
    VALUES (NEW.id, false, null);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to create profile on signup
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger for profiles updated_at
CREATE TRIGGER handle_profiles_updated_at
    BEFORE UPDATE ON public.profiles
    FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();

-- Admin policy for scores (optional)
-- CREATE POLICY "Admins can manage scores" ON public.scores
--     FOR ALL TO authenticated 
--     USING (auth.jwt() ->> 'is_admin' = 'true');

-- Grant necessary permissions
GRANT USAGE ON SCHEMA public TO anon, authenticated;
GRANT ALL ON public.profiles TO authenticated;
GRANT ALL ON public.scores TO authenticated;
GRANT SELECT ON public.profiles TO anon;
GRANT SELECT ON public.scores TO anon;

-- Additional useful views for leaderboards
CREATE OR REPLACE VIEW public.weekly_leaderboard AS
SELECT 
    s.*,
    p.username,
    ROW_NUMBER() OVER (ORDER BY s.score DESC, s.created_at ASC) as position
FROM public.scores s
LEFT JOIN public.profiles p ON s.user_id = p.id
WHERE s.created_at >= date_trunc('week', NOW() AT TIME ZONE 'Europe/Rome') AT TIME ZONE 'Europe/Rome'
ORDER BY s.score DESC, s.created_at ASC;

CREATE OR REPLACE VIEW public.monthly_leaderboard AS
SELECT 
    s.*,
    p.username,
    ROW_NUMBER() OVER (ORDER BY s.score DESC, s.created_at ASC) as position
FROM public.scores s
LEFT JOIN public.profiles p ON s.user_id = p.id
WHERE s.created_at >= date_trunc('month', NOW() AT TIME ZONE 'Europe/Rome') AT TIME ZONE 'Europe/Rome'
ORDER BY s.score DESC, s.created_at ASC;